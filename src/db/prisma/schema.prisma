generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  email        String   @unique
  passwordHash String
  avatarUrl    String?
  exp          Int      @default(0)
  rank         Int      @default(0)
  createdAt    DateTime @default(now())

  rooms        RoomParticipant[]
  answers      PlayerAnswer[]
  matchResults MatchResult[]
}

model Room {
  id        String     @id @default(uuid())
  status    RoomStatus @default(WAITING) // WAITING, IN_PROGRESS, COMPLETED
  phase     Int        @default(1)
  createdAt DateTime   @default(now())

  participants RoomParticipant[]
  questions    RoomQuestion[]
  answers      PlayerAnswer[]
  results      MatchResult[]
}

model RoomParticipant {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  room         Room     @relation(fields: [roomId], references: [id])
  roomId       String
  score        Int      @default(0)
  isEliminated Boolean  @default(false)
  joinedAt     DateTime @default(now())

  @@unique([userId, roomId])
}

model Question {
  id            String   @id @default(uuid())
  topic         String
  questionText  String
  options       Json // e.g., { "a": "Option A", "b": "Option B", ... }
  correctOption String
  createdAt     DateTime @default(now())

  usedInRooms RoomQuestion[]
  answers     PlayerAnswer[]
}

model RoomQuestion {
  id         String    @id @default(uuid())
  room       Room      @relation(fields: [roomId], references: [id])
  roomId     String
  question   Question  @relation(fields: [questionId], references: [id])
  questionId String
  orderNo    Int
  sentAt     DateTime?

  @@unique([roomId, questionId])
}

model PlayerAnswer {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  room           Room     @relation(fields: [roomId], references: [id])
  roomId         String
  question       Question @relation(fields: [questionId], references: [id])
  questionId     String
  selectedOption String
  isCorrect      Boolean
  answeredAt     DateTime @default(now())
}

model MatchResult {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  room        Room     @relation(fields: [roomId], references: [id])
  roomId      String
  finalScore  Int
  expEarned   Int
  isWinner    Boolean
  completedAt DateTime @default(now())
}

enum RoomStatus {
  WAITING
  IN_PROGRESS
  COMPLETED
}
